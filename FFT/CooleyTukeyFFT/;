/*
 * 1D FFT Optimized with CUDA
 *
 * - Kernels
 * - Kernel Launching Methods
 * - 1D FFT_CUDA Wrapper Function
 */

#include <cuda.h>
#include <cmath>

#include "../lib/iterative_CT.h"

#define BLOCK_SIZE 64 // *** Subject to Change
#define WARP_SIZE 32
#define FULL_MASK 0xffffffff

typedef std::complex<double> Complex;
const double PI = 3.14159265358973238460

// Kernel for BitReverse
// *** If it's worth to define bitReverse as a kernel ?? *** //
// *** parallelization may not be worthy for small data size *** //
// *** as the overhead of creating threads will outweigh the performance improvement *** //
// *** and Coalesced Memory Accesses may not be guaranteed ** //
__global__ bitReverse_kernel(Complex *x, int N){
    /*
     * Effectively Reverse the Bits of a Vector
     *
     *  - N: length of the vector x; a power of 2
     * 
     * ### Warp Level __shfl_sync may not be efficient ### 
     * Only half of the elements needed to initiate the swaps
     * since each elememt is only swapped once
     */
    unsigned int startIdx = blockIdx.x * blockDim.x + threadIdx.x;
    unsigned int stride = blockDim.x

    for (idx = startIdx)
}
